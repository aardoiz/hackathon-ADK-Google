def get_src_code():

    text = 'ESTRUCTURA DEL PROYECTO: src\n==================================================\n\n└── 📂 agents/\n    ├── 📂 code_creator/\n    │   ├── 🐍 agent.py\n    │   └── 🐍 model.py\n    ├── 📂 project_explainer/\n    │   ├── 🐍 agent.py\n    │   └── 🐍 tools.py\n    ├── 🐍 __init__.py\n    └── 🐍 agent.py\n\nCONTENIDO DE LOS ARCHIVOS\n==================================================\n\n📁 agents/__init__.py\n----------------------\n\nfrom .agent import root_agent\n\n\n\n📁 agents/agent.py\n-------------------\n\nfrom google.adk.agents import Agent\n\nfrom .code_creator.agent import agent as code_creator\nfrom .project_explainer.agent import agent as project_explainer\n\n\nroot_agent = Agent(\n\n   name="orquestator",\n   model="gemini-2.0-flash", \n   description="Agent to orquestrate all other agents.",\n   instruction="Get the user query & route the other agents",\n   sub_agents=[code_creator, project_explainer],\n)\n\n\n\n📁 agents/code_creator/agent.py\n--------------------------------\n\nfrom google.adk.agents import Agent\n\nfrom .model import PlanInput\n\n\ntemplate = """\nagent = Agent(\n   name="",\n   model="gemini-2.0-flash", \n   description="",\n   instruction="",\n)\n"""\n\n\nagent = Agent(\n   name="Code_Generator",\n   model="gemini-2.0-flash", \n   description="Agent to create a hackaton python project idea based on user_input.",\n   instruction="Given a Plan Input for a hackaton, create a small custom programming idea that uses a multi-agentic python system to replicate that idea. You must output the main description of the project & key ideas; and create code blocks for the agents proposed (maximum 5).",\n   input_schema=PlanInput\n)\n\n\n\n📁 agents/code_creator/model.py\n--------------------------------\n\nfrom pydantic import BaseModel\n\n\nclass PlanInput(BaseModel):\n    project_type: str\n    domain: str\n\n\n\n📁 agents/project_explainer/agent.py\n-------------------------------------\n\nfrom google.adk.agents import Agent\n\nfrom .tools import get_src_code\n\n\nagent = Agent(\n\n   name="Explanation_Agent",\n   model="gemini-2.0-flash", \n   description="Agent to explain the project to the jury in an innovative way.",\n   instruction="Explain the current project code to the hackaton jury. To access code use tools provided.",\n   tools=[get_src_code]\n)\n\n\n\n📁 agents/project_explainer/tools.py\n-------------------------------------\n\n\n\n\ndef get_src_code():\n\n    text = ""\n\n    return text\n\n'

    return text